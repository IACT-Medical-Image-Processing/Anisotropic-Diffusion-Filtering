apply plugin: 'java'

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task wrapper(type: Wrapper) {
   gradleVersion = '2.0' 
}

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "org.projectlombok:lombok:1.16.10"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2'
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

jacocoTestReport.doFirst {
	def base_dir = 'build/classes/main/de/syntaktischer_zucker/diffusion/';
	classDirectories = files(base_dir+'/BaseFilter.class',
				 base_dir+'/ImageProcessor.class');
}

jacocoTestReport {
    description = "Generates Jacoco coverage reports for unit tests"
    reports {
        xml.enabled = true 
        html.enabled = true
    }
}

task testReport(type: TestReport) {
    setDescription('Generates a test report from all subproject test tasks')
    setGroup(JavaBasePlugin.DOCUMENTATION_GROUP)

    def testFailures = 0

    destinationDir = file("$buildDir/reports/allTests")

    reportOn subprojects*.test

    subprojects {
        test {
            ignoreFailures true
            afterSuite { td, tr ->
                if (td.getParent() == null) {
                    testFailures += tr.getFailedTestCount()
                }
            }
        }
    }

    doLast {
        if (testFailures > 0) {
           throw new Exception("There were ${testFailures} test failures")
        }
    }
}
